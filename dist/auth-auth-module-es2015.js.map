{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/register/register.component.ts","./src/app/register/register.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbAuthComponent } from '@nebular/auth';\nimport { NgxLoginComponent } from \"../login/login.component\";\nimport { RegisterComponent } from '../register/register.component';\n// import { AuthRoutingModule} from './auth.module';\n\nexport const routes: Routes =[\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [{\n      path: 'login',\n      component: NgxLoginComponent,\n      \n    },\n    {\n      path: 'register',\n      component: RegisterComponent,\n      \n    }\n  ]\n  },\n     \n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [ \n    // CommonModule, NgxAuthModule\n  ],\n})\nexport class NgxAuthRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxAuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport { \n  NbAlertModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbInputModule\n} from '@nebular/theme';\nimport { NgxLoginComponent } from \"../login/login.component\";\nimport { RegisterComponent } from \"../register/register.component\";\n// import { NbRegisterComponent} from \"../register/register.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NgxAuthRoutingModule,\n    ReactiveFormsModule,\n    NbAuthModule,\n  ],\n  declarations: [\n    NgxLoginComponent,\n    RegisterComponent\n    // NbRegisterComponent,\n  ],\n})\nexport class NgxAuthModule {\n}","import { Component, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { NbLoginComponent, NbAuthService,} from '@nebular/auth';\nimport { ParseService } from '../parse.service';\nimport { Router } from '@angular/router';\nimport * as Parse from 'parse';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  // styleUrls: ['./login.component.scss']\n \n})\nexport class NgxLoginComponent extends NbLoginComponent implements OnInit {\n  async login() {\n    try {\n      const {email, password} = this.user;\n      let user = await Parse.User.logIn(email, password);\n      if (user && user.id) {\n        this.router.navigate([\"/\"]);\n      } else {\n        alert(\"user not exist\");\n      }\n    } catch {\n      alert(\"user not exist\");\n    }\n  }\n \n  ngOnInit() {\n    Parse.initialize(\"eb7fb0d3-5187-49f8\");\n    Parse.serverURL = 'http://192.168.1.51:1338/parse';\n  }\n}","<h1 id=\"title\" class=\"title\">Sign in</h1>\n<p class=\"sub-title\">Sign in with your email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput fullWidth [(ngModel)]=\"user.email\" #email=\"ngModel\" name=\"email\" id=\"input-email\" pattern=\".+@.+\\..+\"\n      placeholder=\"Email address\" autofocus [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n      [required]=\"getConfigValue('forms.validation.email.required')\"\n      [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"error-message\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput fullWidth [(ngModel)]=\"user.password\" #password=\"ngModel\" name=\"password\" type=\"password\"\n      id=\"input-password\" placeholder=\"Password\"\n      [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\"\n      [required]=\"getConfigValue('forms.validation.password.required')\"\n      [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n      [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n      [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"error-message\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\n    <a class=\"forgot-password\" routerLink=\"../request-password\">Forgot Password?</a>\n  </div>\n\n  <button nbButton fullWidth status=\"success\" [disabled]=\"submitted || !form.valid\" [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\" [routerLink]=\"socialLink.link\" [attr.target]=\"socialLink.target\"\n        [attr.class]=\"socialLink.icon\" [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n      <a *ngIf=\"socialLink.url\" [attr.href]=\"socialLink.url\" [attr.target]=\"socialLink.target\"\n        [attr.class]=\"socialLink.icon\" [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>","import { Component, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { NbRegisterComponent, } from '@nebular/auth';\nimport { ParseService } from '../parse.service';\nimport { Router } from '@angular/router';\nimport * as Parse from 'parse';\n\n\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends NbRegisterComponent implements OnInit {\n  async register() {\n    console.log(this.user);\n    let user = new Parse.User();\n    user.set(\"username\", this.user.fullName);\n    user.set(\"password\", this.user.password);\n    user.set(\"email\", this.user.email);\n\n    // // other fields can be set just like with Parse.Object\n    // user.set(\"phone\", \"xxx-xxx-xxx\");\n\n    try {\n      await user.signUp();\n      alert(\"Create Successfull !!!\");\n      // Hooray! Let them use the app now.\n    } catch (error) {\n      // Show the error message somewhere and let the user try again.\n      alert(\"Error: \" + error.code + \" \" + error.message);\n    }\n  }\n  ngOnInit() {\n    Parse.initialize(\"eb7fb0d3-5187-49f8\");\n    Parse.serverURL = 'http://192.168.1.51:1338/parse';\n  }\n}\n\n","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"error-message\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"error-message\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"error-message\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"error-message\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"success\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n"],"sourceRoot":"webpack:///"}