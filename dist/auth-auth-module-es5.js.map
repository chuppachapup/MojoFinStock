{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/register/register.component.ts"],"names":["routes","path","component","children","NgxAuthRoutingModule","forChild","imports","exports","declarations","NgxAuthModule","NgxLoginComponent","user","email","password","logIn","id","router","navigate","alert","login","selector","templateUrl","RegisterComponent","console","log","set","fullName","signUp","code","message","register","styleUrls"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NbAuthComponent } from '@nebular/auth';\nimport { NgxLoginComponent } from \"../login/login.component\";\nimport { RegisterComponent } from '../register/register.component';\n// import { AuthRoutingModule} from './auth.module';\n\nexport const routes: Routes =[\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [{\n      path: 'login',\n      component: NgxLoginComponent,\n      \n    },\n    {\n      path: 'register',\n      component: RegisterComponent,\n      \n    }\n  ]\n  },\n     \n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  declarations: [ \n    // CommonModule, NgxAuthModule\n  ],\n})\nexport class NgxAuthRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxAuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport { \n  NbAlertModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbInputModule\n} from '@nebular/theme';\nimport { NgxLoginComponent } from \"../login/login.component\";\nimport { RegisterComponent } from \"../register/register.component\";\n// import { NbRegisterComponent} from \"../register/register.component\";\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NgxAuthRoutingModule,\n    ReactiveFormsModule,\n    NbAuthModule,\n  ],\n  declarations: [\n    NgxLoginComponent,\n    RegisterComponent\n    // NbRegisterComponent,\n  ],\n})\nexport class NgxAuthModule {\n}","<h1 id=\"title\" class=\"title\">Sign in</h1>\n<p class=\"sub-title\">Sign in with your email.</p>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput fullWidth [(ngModel)]=\"user.email\" #email=\"ngModel\" name=\"email\" id=\"input-email\" pattern=\".+@.+\\..+\"\n      placeholder=\"Email address\" autofocus [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n      [required]=\"getConfigValue('forms.validation.email.required')\"\n      [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"error-message\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput fullWidth [(ngModel)]=\"user.password\" #password=\"ngModel\" name=\"password\" type=\"password\"\n      id=\"input-password\" placeholder=\"Password\"\n      [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\"\n      [required]=\"getConfigValue('forms.validation.password.required')\"\n      [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n      [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n      [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"error-message\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>\n    <a class=\"forgot-password\" routerLink=\"../request-password\">Forgot Password?</a>\n  </div>\n\n  <button nbButton fullWidth status=\"success\" [disabled]=\"submitted || !form.valid\" [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\" [routerLink]=\"socialLink.link\" [attr.target]=\"socialLink.target\"\n        [attr.class]=\"socialLink.icon\" [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n      <a *ngIf=\"socialLink.url\" [attr.href]=\"socialLink.url\" [attr.target]=\"socialLink.target\"\n        [attr.class]=\"socialLink.icon\" [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>","import { Component, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { NbLoginComponent, NbAuthService,} from '@nebular/auth';\nimport { ParseService } from '../parse.service';\nimport { Router } from '@angular/router';\nimport * as Parse from 'parse';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n  // styleUrls: ['./login.component.scss']\n \n})\nexport class NgxLoginComponent extends NbLoginComponent implements OnInit {\n  async login() {\n    try {\n      const {email, password} = this.user;\n      let user = await Parse.User.logIn(email, password);\n      if (user && user.id) {\n        this.router.navigate([\"/\"]);\n      } else {\n        alert(\"user not exist\");\n      }\n    } catch {\n      alert(\"user not exist\");\n    }\n  }\n \n  ngOnInit() {\n    Parse.initialize(\"eb7fb0d3-5187-49f8\");\n    Parse.serverURL = 'http://192.168.1.51:1338/parse';\n  }\n}","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"error-message\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"error-message\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"error-message\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contains\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           [status]=\"email.dirty ? (email.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"error-message\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"error-message\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\" *ngIf=\"getConfigValue('forms.register.terms')\">\n    <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n      Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n    </nb-checkbox>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"success\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  or enter with:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","import { Component, ChangeDetectorRef, OnInit } from '@angular/core';\nimport { NbRegisterComponent, } from '@nebular/auth';\nimport { ParseService } from '../parse.service';\nimport { Router } from '@angular/router';\nimport * as Parse from 'parse';\n\n\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent extends NbRegisterComponent implements OnInit {\n  async register() {\n    console.log(this.user);\n    let user = new Parse.User();\n    user.set(\"username\", this.user.fullName);\n    user.set(\"password\", this.user.password);\n    user.set(\"email\", this.user.email);\n\n    // // other fields can be set just like with Parse.Object\n    // user.set(\"phone\", \"xxx-xxx-xxx\");\n\n    try {\n      await user.signUp();\n      alert(\"Create Successfull !!!\");\n      // Hooray! Let them use the app now.\n    } catch (error) {\n      // Show the error message somewhere and let the user try again.\n      alert(\"Error: \" + error.code + \" \" + error.message);\n    }\n  }\n  ngOnInit() {\n    Parse.initialize(\"eb7fb0d3-5187-49f8\");\n    Parse.serverURL = 'http://192.168.1.51:1338/parse';\n  }\n}\n\n"]}